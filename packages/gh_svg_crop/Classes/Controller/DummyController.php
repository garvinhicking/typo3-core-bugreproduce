<?php
namespace GarvinHicking\SvgCrop\Controller;

use Psr\Http\Message\ResponseInterface;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Database\Query\Restriction\DeletedRestriction;
use TYPO3\CMS\Core\Database\Query\Restriction\HiddenRestriction;
use TYPO3\CMS\Core\EventDispatcher\EventDispatcher;
use TYPO3\CMS\Core\Resource\FileRepository;
use TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder;
use TYPO3\CMS\Frontend\ContentObject\ContentObjectRenderer;
use TYPO3\CMS\Core\Utility\GeneralUtility;

class DummyController extends \TYPO3\CMS\Extbase\Mvc\Controller\ActionController
{
    public function initializeAction()
    {
        parent::initializeAction(); // TODO: Change the autogenerated stub
        $this->uriBuilder->setArgumentPrefix('mymynooooo');
    }

    public function listAction(): ResponseInterface
    {
        /** @var ContentObjectRenderer $content */
        $content = $this->request->getAttribute('currentContentObject');
        $uid = $content->data['uid'];

        $fileRepository = \TYPO3\CMS\Core\Utility\GeneralUtility::makeInstance(FileRepository::class);
        $fileObjects = $fileRepository->findByRelation(
            'tt_content',
            'settings.cropImage',
            $uid);
        $this->view->assign('images', $fileObjects);


        $this->view->assign('link', $this->uriBuilder
            ->reset()
            ->setTargetPageUid(189)
            ->setArgumentPrefix('mymymy')
            ->uriFor(
                'anotherAction',
                [
                    'myRecord' => 21,
                ],
                'DummyController',
                'gh_svg_crop',
                'gh_svp_crop'
            )
        );

        /*
        $dbal = GeneralUtility::makeInstance(ConnectionPool::class)->getConnectionForTable('mytable');
        $dbal->executeStatement('ALTER TABLE mytable AUTO_INCREMENT = 1')
        */
            
        $dbal = GeneralUtility::makeInstance(ConnectionPool::class)->getConnectionForTable('be_dashboards');
        $dbal->executeStatement('ALTER TABLE be_dashboards AUTO_INCREMENT = 100');

        /** @var \Doctrine\DBAL\Connection $conn */
        $schema = new \Doctrine\DBAL\Schema\Schema();
        $schemaName = 'be_dashboards';
        $schema->
        $myTable = $schema->createTable($schemaName);
        $myTable->addColumn("uuid", "string", ["length" => 36]);
        $myTable->addColumn("status", "smallint", ["unsigned" => true]);
        $myTable->addColumn("created", "integer", ["unsigned" => true]);
        $myTable->addColumn("changed", "integer", ["unsigned" => true]);
        $myTable->addColumn("type", "string", ["length" => 32]);
        $myTable->addColumn("scope", "string", ["length" => 32]);
        $myTable->addColumn("request_time", "bigint", ["unsigned" => true]);
        $myTable->addColumn("meta", "text", ["length" => 16777215]);
        $myTable->addColumn("details", "string", ["length" => 16777215]);
        $myTable->addColumn("summary", "string", ["length" => 40]);

        $myTable->setPrimaryKey(["uuid"]);

        $myTable->addIndex(['type', 'scope']);
        $myTable->addIndex(['created']);
        $myTable->addIndex(['changed']);
        $myTable->addIndex(['request_time']);

        $dropSchema = $schema->toDropSql($conn->getDatabasePlatform()); // get queries to safely delete this schema.
        $addSchema = $schema->toSql($conn->getDatabasePlatform()); // get queries to create this schema.


        return $this->htmlResponse();
    }
}
